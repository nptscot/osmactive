[{"path":"https://nptscot.github.io/osmactive/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Robin Lovelace Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/classify-cbd.html","id":"level-of-service","dir":"Articles","previous_headings":"","what":"Level of service","title":"Scottish Cycling by Design classification","text":"level service associated link can calculated based Level Service table Cycling Design guidance:  can create Speed Limit (mph) AADT columns cycle_net object: Finally, can calculate level service link:","code":"cycle_net_speeds = clean_speeds(cycle_net) cycle_net_volumes = estimate_traffic(cycle_net_speeds) cycle_net$`Speed Limit (mph)` = classify_speeds(cycle_net_speeds$maxspeed_clean) cycle_net$AADT = npt_to_cbd_aadt_numeric(cycle_net_volumes$assumed_volume) table(cycle_net$`Speed Limit (mph)`) #>  #> <20 mph  20 mph  30 mph  40 mph  50 mph 60+ mph  #>       1     289    2576      92       2      22 table(cycle_net$AADT) #>  #>    0 to 1999 2000 to 3999        4000+  #>           89          168          403 # devtools::load_all() cycle_net_los = level_of_service(cycle_net)  #> Joining with `by = join_by(cycle_segregation, `Speed Limit (mph)`, #> AADT)` # |> # select(osm_id, `Level of Service`, `Speed Limit (mph)`, AADT, cycle_segregation) table(cycle_net_los$`Level of Service`) #>  #>                                            High  #>                                            1359  #>                                             Low  #>                                             379  #>                                          Medium  #>                                            6070  #> Should not be used (non-compliant intervention)  #>                                              24 # Count NA values: cycle_net_los |>   sf::st_drop_geometry() |>   group_by(`Speed Limit (mph)`, AADT, cycle_segregation) |>   summarise(na = sum(is.na(`Level of Service`))) |>   filter(na > 0) |>   arrange(desc(na)) #> `summarise()` has grouped output by 'Speed Limit (mph)', 'AADT'. You can #> override using the `.groups` argument. #> # A tibble: 0 × 4 #> # Groups:   Speed Limit (mph), AADT [0] #> # ℹ 4 variables: Speed Limit (mph) <chr>, AADT <chr>, cycle_segregation <chr>, #> #   na <int> cycle_net_los_plot = cycle_net_los |>   select(osm_id, `Speed Limit (mph)`, AADT, cycle_segregation, `Level of Service`) # mapview::mapview(cycle_net_los_plot, zcol = \"Level of Service\")"},{"path":"https://nptscot.github.io/osmactive/articles/classifying-cycle-infrastructure.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Typologies of cycle infrastructure","text":"Transport networks diverse complex. applies modes transport, especially ‘cycle network’ , uniquely, includes infrastructure motorised non-motorised modes. paper present typology cycle infrastructure classification systems, based review official documents academic literature. find substantial differences way cycle infrastructure classified countries. Countries established pro-cycling policies tend TBC classification systems, countries less established pro-cycling policies tend TBC classification systems. Recent efforts provide international guidance talk classify cycling infrastructure impacts policies: measuring level separation motor traffic, example, enables planners focus infrastructure safe . conclude tentative recommendations classification systems different use cases, reference open source implementations reproducible cycle infrastructure classification. osmactive package accompanies paper, classifies cycle infrastructure based OSM tags represents one implementation. work presented paper experience developing package can provide basis open community-driven classification systems co-evolve changing policy, community data-availability landscapes.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"Active travel accessible cost-effective way replace short car trips make transport systems sustainable. Network Planning Tool (NPT) Scotland new web-based strategic network planning tool estimates cycling potential street level. NPT builds functionality Propensity Cycle Tool (PCT) related tools [@lovelace2017; @goodman2019; @lovelace2024; @félix2025], offering detailed nationwide cycling potential analysis Scotland. NPT funded Transport Scotland developed University Leeds collaboration Sustrans Scotland. tool open-source hosted github.come/nptscot, enabling others learn contribute underlying methods help make transport planning open participatory [@lovelace2020a]. unique feature NPT integration multiple layers single tool, overcoming limitations previous strategic network planning tools, generally focus either behaviour data (PCT) physical infrastructure [@vybornova2024; @vierø2024]. NPT brings together dozen datasets, including Ordnance Survey Mastermap OpenStreetmap data products provide comprehensive data potential mode shift, infrastructure, modelled motor traffic levels, street space network level. paper presents new geographic methods developed support work, reference reproducible code use new osmactive R package classifying national-scale OpenStreetMap (OSM) datasets based attributes geographic relationships, anime Rust crate astonishingly fast accurate route network data integration.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"datasets-and-methods","dir":"Articles","previous_headings":"","what":"Datasets and methods","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"NPT uses datasets diverse sources including DfT’s network traffic sensors, motor traffic counts based survey evaluating Edinburgh’s roll-20 mph speed limits, National Travel Survey, Scottish Household Travel Survey. used four key datasets representing road network project: Ordnance Survey OpenRoads, open access simplified representation road network ideal visualisation OS MasterMap Highways, detailed dataset includes information road widths features OS Mastermap Topography, detailed vector dataset includes detailed information geometry many features man-made environment, including curb lines. OS Topo layer roads pieces transport infrastructure footways (pavements) represented corridor lane centerlines, polygons. OpenStreetMap, crowdsourced dataset continuously updated community volunteers. dataset rich, tags width smoothness infrastructure, consistent OS datasets. Ordnance Survey’s MasterMap Highways Topography datasets provide unparalleled accuracy detail, struggle import using consumer-grade hardware standard tools QGIS. overcome issue developed mastermapr package collaboration government agency Active Travel England (ATE), efficiently flexibly imports MasterMap datasets (50 GB compressed). importing four route network datasets outlined , integrated using following steps: Pavement widths calculated OS MasterMap Topography dataset using function get_pavement_widths() osmactive package. function calculates width manmade roadside features associated road segment dividing area matching polygons associated road segment length road segment. get_bus_routes() function osmactive package used determine number bus lanes road segment. used anime Rust crate efficiently join networks, based alignment proximity. use spatial indexes makes implementation highly efficient compared rnet_join() function R package stplanr using previously. See josiahparry/ANIME codebase GitHub details new algorithm implementation R (planned Python) interface new anime Rust crate.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"classifying-openstreetnetwork-ways","dir":"Articles","previous_headings":"Datasets and methods","what":"Classifying OpenStreetNetwork ways","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"Functions including get_travel_network() classify_cycle_infrastructure() osmactive package used classify cycle infrastructure types based presence cycle lanes, tracks, features (see code snippet generates @fig-bristol ).","code":"osm = get_travel_network(\"bristol\") cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) plot_osm_tmap(cycle_net)"},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"road-width-measurements","dir":"Articles","previous_headings":"Datasets and methods","what":"Road width measurements","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"Two key measurements needed assess whether existing roads can accommodate cycle infrastructure: carriageway width corridor width, defined . Accurate available carriageway width measurements important determine proposed infrastructure can fit solely within carriageway, without need moving curbs roadside features. Scottish Cycling Design (CbD) guidance document outlines three types cycle infrastructure run along carriageway, building Department Transport guidance [@departmentfortransport2020]: Cycle track carriageway level Stepped cycle track Cycle track footway level first option, cycle track carriage level, additional advantages stepped cycleway, often cheaper construct new tarmac required many cases requires sufficient width existing carriageway accommodate cycle infrastructure. Corridor width captures carriageway plus built roadside features, footways. following dplyr query used extract width manmade roadside features: filter(descriptive_group == \"Roadside\", make == \"Manmade\"). point, calculated width pavements associated road segment dividing area matching polygons associated road segment length road segment, implemented get_pavement_widths() function osmactive package.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"minimum-cycle-track-and-buffer-widths","dir":"Articles","previous_headings":"Datasets and methods","what":"Minimum cycle track and buffer widths","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"corridor width important determines whether, cases insufficient space carriageway, part footway manmade roadside features may reallocated cycle infrastructure, still maintaining recommended minimum widths pedestrians. CbD guidance widths summarised table @tbl-cbd. Table illustrating minimum width requirements cycle infrastructure according Cycling Design (CbD) guidance. {#tbl-cbd} CbD also specifies buffers must accounted calculating effective available width cycle infrastructure (@tbl-buffers). Table illustrating buffer widths cycle infrastructure based road type speed limit according Cycling Design (CbD) guidance. {#tbl-buffers} Speed limit data taken OSM used determine buffer width road segment.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"bus-routes-and-road-traffic-assumptions","dir":"Articles","previous_headings":"Datasets and methods","what":"Bus routes and road traffic assumptions","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"minimum space requirements motor traffic depend uses road, including whether bus route whether dedicated bus lanes. Based Active Travel England cross section check tool, part Active Travel England’s open access Excel-based design tools (see acteng.github.io/inspectorate_tools/ web-based versions), assumed following widths motor traffic: Non-bus routes: 2 × 2.75 m Bus routes without dedicated bus lanes: 2 × 3.2 m Bus routes dedicated bus lanes: 2 × 3.2 m plus additional space n_bus_lanes × 3.2 m dedicated bus lanes. number bus lanes determined OSM data function get_bus_routes() R package osmactive developed project. results illustrated @fig-edinburgh-bus-lanes, can also reproduced following Overpass Turbo query:","code":"relation[\"route\"=\"bus\"]({{bbox}});"},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"result data engineering, data integration, modelling visualisation steps described datasets visualised interactively NPT web application, using pmtiles efficient rendering large datasets [@gonçalves2023]. key components NPT : “Route network” layer, presenting data cycling potential OSM-based simplified [@lovelace_reproducible_2024] network layers. “Infrastructure traffic” layer, includes data motor traffic levels cycle infrastructure. “Street space” layer, categorises roads accordance Cycling Design guidance, specifying methodology classifying road spaces cycle infrastructure, presented @fig-street-space. “Core network” layer, representing cohesive network priority planning new infrastructure, building previous work [@szell2021]. Network Planning Workspace (NPW) web application, allows users explore data create custom scenarios infrastructure change.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"Network Planning Tool Scotland cutting-edge web application designed strategic cycle network planning. unique feature NPT integration multiple layers single tool, overcoming limitations previous strategic network planning tools, generally focus either behaviour data physical infrastructure. new street space layer represents step change access combined carriageway corridor widths, first time data made available national level, best knowledge. future work plan improve NPT incorporating new datasets variety sources, including Scotland’s Spatial Hub. like develop context-specific classifications osmactive package better address diverse needs different urban environments support roll-methods new places.","code":""},{"path":[]},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"Thanks Transport Scotland funding development Network Planning Tool Scotland, many users provided feedback tool. Thanks Sustrans Scotland, Matt Davis Angus Calder particular, collaborating project. Thanks OpenStreetMap community creating maintaining data underpins NPT.  Thanks Ordnance Survey providing MasterMap data underpins NPT (contains OS data © Crown copyright database rights 2025 OS licence number 100046668).","code":""},{"path":"https://nptscot.github.io/osmactive/articles/gisruk2025.html","id":"biographies","dir":"Articles","previous_headings":"","what":"Biographies","title":"Mapping, classifying, and integrating diverse street network datasets: new methods and open source tools for active travel planning","text":"Robin Lovelace Professor Transport Data Science Leeds Institute Transport Studies () specialises data science geocomputation, focus modeling transport systems, active travel, decarbonisation. Zhao Wang researcher Leeds Institute Transport Studies (). Zhao specializes machine learning, data science geocomputation transport planning engineering. Hussein Mahfouz PhD student Leeds Institute Transport Studies () specialises data science geocomputation transport planning engineering, focus Demand Responsive Transport (DRT). Juan Pablo Fonseca Zamora PhD student Leeds Institute Transport Studies () specialises new methods traffic modelling. Angus Calder Senior Mobility Planner Sustrans Scotland specialises active travel planning infrastructure design. Martin Lucas-Smith Director CycleStreets Ltd specialises open data open source software cycling. Dustin Carlino independent researcher software developer, specialising open source software development geographic data science. Josiah Parry Senior Product Engineer Environmental Systems Research Institute, Inc (Esri) open source software developer. Rosa Félix researcher University Lisbon specialises geographic methods transport planning, focus active travel decarbonisation.","code":""},{"path":"https://nptscot.github.io/osmactive/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin Lovelace. Author, maintainer. Joey Talbot. Author.","code":""},{"path":"https://nptscot.github.io/osmactive/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lovelace R, Talbot J (2025). osmactive: Extract Active Travel Infrastructure OpenStreetMap. R package version 0.0.0.9000, https://nptscot.github.io/osmactive/.","code":"@Manual{,   title = {osmactive: Extract Active Travel Infrastructure from OpenStreetMap},   author = {Robin Lovelace and Joey Talbot},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://nptscot.github.io/osmactive/}, }"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"osmactive","dir":"","previous_headings":"","what":"Extract Active Travel Infrastructure from OpenStreetMap","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"goal osmactive provide functions, example datasets documentation extracting active travel infrastructure OpenStreetMap data. Install package : Alternatively, can load package following local development:","code":"remotes::install_github(\"nptscot/osmactive\") library(osmactive) library(tmap) # for mapping library(dplyr) # for data manipulation library(sf) # for spatial data"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"minimal-example","dir":"","previous_headings":"","what":"Minimal example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"package comes example data testing functions. can test functions follows: can also create plots packaged plot_osm_tmap() function:","code":"osm = osm_edinburgh cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) drive_net_major = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) table(cycle_net$detailed_segregation) #>  #>          Level track Mixed Traffic Street    Off Road Cycleway  #>                   13                    1                    4  #>   Painted Cycle Lane  #>                    3 table(cycle_net$cycle_segregation) #>  #>   Segregated Track (wide)         Off Road Cycleway Segregated Track (narrow)  #>                         7                         4                         6  #>            Shared Footway        Painted Cycle Lane  #>                         1                         3 m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"leeds-example","dir":"","previous_headings":"","what":"Leeds example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"osm = get_travel_network(\"Leeds\") #> Reading layer `lines' from data source `/home/robin/data/osm/bbbike_Leeds.gpkg' using driver `GPKG' #> Simple feature collection with 39330 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.634843 ymin: 53.74351 xmax: -1.452746 ymax: 53.85133 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m tmap_save(m, \"classify_cycle_infrastructure_leeds.html\") browseURL(\"classify_cycle_infrastructure_leeds.html\")  system(\"gh release upload v0.1 classify_cycle_infrastructure_leeds.html --clobber\")  # Available: # https://github.com/nptscot/osmactive/releases/download/v0.1/classify_cycle_infrastructure_leeds.html"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"edinburgh-example","dir":"","previous_headings":"","what":"Edinburgh example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"osm = get_travel_network(\"Edinburgh\") #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/bbbike_Edinburgh.gpkg' using driver `GPKG' #> Simple feature collection with 223516 features and 45 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -3.579998 ymin: 55.7 xmax: -2.77 ymax: 56.1 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"dublin-example","dir":"","previous_headings":"","what":"Dublin example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"dublin_zones = zonebuilder::zb_zone(\"Dublin\") dublin_6km = dublin_zones |>   filter(circle_id <= 3) |>   sf::st_union() osm = get_travel_network(\"Republic of Ireland\", boundary = dublin_6km, boundary_type = \"clipsrc\") #> 0...10...20...30...40...50...60... #> 70...80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/geofabrik_ireland-and-northern-ireland-latest.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 50319 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -6.350653 ymin: 53.29547 xmax: -6.170875 ymax: 53.40329 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"lisbon-example","dir":"","previous_headings":"","what":"Lisbon example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"u = \"https://ushift.tecnico.ulisboa.pt/content/data/lisbon_limit.geojson\" f = basename(u) if (!file.exists(f)) download.file(u, f) lisbon = sf::read_sf(f) lisbon = lisbon |>   sf::st_cast(\"POLYGON\") osm = get_travel_network(\"Portugal\", boundary = lisbon, boundary_type = \"clipsrc\", force_vectortranslate = TRUE) #> 0...10...20...30...40...50...60...70... #> 80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/geofabrik_portugal-latest.gpkg' using driver `GPKG' #> Simple feature collection with 47866 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -9.229835 ymin: 38.6914 xmax: -9.087336 ymax: 38.79747 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"london","dir":"","previous_headings":"","what":"London","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"london = zonebuilder::zb_zone(\"Southwark Station\", n_circles = 1) london = sf::st_union(london) |>   sf::st_make_valid() osm = get_travel_network(london, boundary = london, boundary_type = \"clipsrc\") #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/geofabrik_greater-london-latest.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 5856 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -0.1188785 ymin: 51.49424 xmax: -0.09009284 ymax: 51.51222 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"cambridge","dir":"","previous_headings":"","what":"Cambridge","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"cambridge = zonebuilder::zb_zone(\"Cambridge\") cambridge = sf::st_union(cambridge) |>   sf::st_make_valid() osm = get_travel_network(\"Cambridge\", boundary = cambridge, boundary_type = \"clipsrc\") #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/bbbike_Cambridge.gpkg' using driver `GPKG' #> Simple feature collection with 49665 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -0.0399984 ymin: 52.12 xmax: 0.319972 ymax: 52.28 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Segregation levels — classify_cycle_infrastructure","title":"Segregation levels — classify_cycle_infrastructure","text":"function classifies OSM ways cycle infrastructure type levels given dataset.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segregation levels — classify_cycle_infrastructure","text":"","code":"classify_cycle_infrastructure(   osm,   min_distance = 20,   classification_type = \"Scotland\",   include_mixed_traffic = FALSE )"},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segregation levels — classify_cycle_infrastructure","text":"osm input dataset segregation levels need calculated. min_distance minimum distance road cycleway considered -road. classification_type classification type used. Currently \"Scotland\" supported. include_mixed_traffic Whether include mixed traffic segments results.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segregation levels — classify_cycle_infrastructure","text":"sf object new column cycle_segregation contains segregation levels.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segregation levels — classify_cycle_infrastructure","text":"See wiki.openstreetmap.org/wiki/Key:cycleway taginfo.openstreetmap.org/keys/cycleway#values information cycleway values used classify cycle infrastructure. Currently, \"Scotland\" classification type supported. See Scottish Government's Cycling Design information.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segregation levels — classify_cycle_infrastructure","text":"","code":"library(tmap) tmap_mode(\"plot\") #> ℹ tmap mode set to \"plot\". osm = osm_edinburgh cycle_network = get_cycling_network(osm) driving_network = get_driving_network(osm) netd = distance_to_road(cycle_network, driving_network) netc = classify_cycle_infrastructure(netd) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE plot(netc[\"cycle_segregation\"])  plot(netc[\"distance_to_road\"])  plot_osm_tmap(netc)  # Interactive map: # tmap_mode(\"view\") # plot_osm_tmap(netc)"},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"Ways bicycles pedestrians share space classified \"Shared Footway\". According ","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"","code":"classify_shared_use(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"sf object classified cycle network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"tagging includes: highway=path (signposted foot bicycle path, dividing line) foot=designated bicycle=designated segregated=highway=path (Signposted foot bicycle path dividing line.) segregated=yes highway=pedestrian (way intended pedestrians)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"","code":"osm = osm_edinburgh cycle_network = get_cycling_network(osm) cycle_network_shared = classify_shared_use(cycle_network) table(cycle_network_shared$cycle_pedestrian_separation) #>  #>     Shared Footway (segregated) Shared Footway (not segregated)  #>                               5                               3  #>                         Unknown  #>                              59  plot(cycle_network_shared[\"cycle_pedestrian_separation\"])  # interactive map: # mapview::mapview(cycle_network_shared, zcol = \"cycle_pedestrian_separation\")"},{"path":"https://nptscot.github.io/osmactive/reference/classify_speeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Speeds — classify_speeds","title":"Classify Speeds — classify_speeds","text":"function classifies speeds miles per hour (mph) categories.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_speeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Speeds — classify_speeds","text":"","code":"classify_speeds(speed_mph)"},{"path":"https://nptscot.github.io/osmactive/reference/classify_speeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Speeds — classify_speeds","text":"speed_mph numeric vector representing speeds miles per hour.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_speeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Speeds — classify_speeds","text":"character vector speed categories.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_speeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify Speeds — classify_speeds","text":"","code":"classify_speeds(c(15, 25, 35, 45, 55, 65)) #> [1] \"<20 mph\" \"20 mph\"  \"30 mph\"  \"40 mph\"  \"50 mph\"  \"60+ mph\" # Returns: \"<20 mph\", \"20 mph\", \"30 mph\", \"40 mph\", \"50 mph\", \"60+ mph\""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean speeds — clean_speeds","title":"Clean speeds — clean_speeds","text":"Clean speeds","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean speeds — clean_speeds","text":"","code":"clean_speeds(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean speeds — clean_speeds","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean speeds — clean_speeds","text":"sf object cleaned speed values column maxspeed_clean","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean speeds — clean_speeds","text":"","code":"osm = osm_edinburgh osm_cleaned = clean_speeds(osm) # check NAs: sel_nas = is.na(osm_cleaned$maxspeed_clean) osm_no_maxspeed = osm_cleaned[sel_nas, c(\"highway\")] table(osm_no_maxspeed$highway) # Active travel infrastructure has no maxspeed #>  #>   cycleway    footway       path pedestrian  #>          2         24          1          3  table(osm_cleaned$maxspeed) #>  #> 20 mph  5 mph  #>     42      1  table(osm_cleaned$maxspeed_clean) #>  #>  5 20 30  #>  1 42 50  plot(osm_cleaned[c(\"maxspeed\", \"maxspeed_clean\")])"},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"Clean cycleway widths (use est_widths available width otherwise)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"","code":"clean_widths(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"sf object cleaned cycleway widths column width","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"","code":"osm = osm_edinburgh osm$widthosm$est_width = NA osm$est_width[1:3] = 2 osm_cleaned = clean_widths(osm) osm$widthosm_cleaned$width},{"path":"https://nptscot.github.io/osmactive/reference/count_bus_lanes.html","id":null,"dir":"Reference","previous_headings":"","what":"Count how many bus lanes there are — count_bus_lanes","title":"Count how many bus lanes there are — count_bus_lanes","text":"Count many bus lanes ","code":""},{"path":"https://nptscot.github.io/osmactive/reference/count_bus_lanes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count how many bus lanes there are — count_bus_lanes","text":"","code":"count_bus_lanes(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/count_bus_lanes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count how many bus lanes there are — count_bus_lanes","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/count_bus_lanes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count how many bus lanes there are — count_bus_lanes","text":"number bus lanes","code":""},{"path":"https://nptscot.github.io/osmactive/reference/count_bus_lanes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count how many bus lanes there are — count_bus_lanes","text":"","code":"osm = osm_edinburgh count_bus_lanes(osm) #> Matched these columns:  #> numeric(0)"},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance from route network segments to roads — distance_to_road","title":"Calculate distance from route network segments to roads — distance_to_road","text":"function approximates distance route network nearest road. first computing sf::st_point_on_surface route network segments calculating distance nearest road using geos::geos_distance function.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance from route network segments to roads — distance_to_road","text":"","code":"distance_to_road(rnet, roads)"},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance from route network segments to roads — distance_to_road","text":"rnet route network distance road needs calculated. roads road network distance needs calculated.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance from route network segments to roads — distance_to_road","text":"sf object new column distance_to_road contains distance road.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distance from route network segments to roads — distance_to_road","text":"","code":"osm = osm_edinburgh cycle_network = get_cycling_network(osm) driving_network = get_driving_network(osm) edinburgh_cycle_with_distance = distance_to_road(cycle_network, driving_network)"},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate traffic — estimate_traffic","title":"Estimate traffic — estimate_traffic","text":"Estimate traffic","code":""},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate traffic — estimate_traffic","text":"","code":"estimate_traffic(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate traffic — estimate_traffic","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate traffic — estimate_traffic","text":"sf object estimated road traffic volumes column assumed_volume","code":""},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate traffic — estimate_traffic","text":"","code":"osm = osm_edinburgh osm_traffic = estimate_traffic(osm) # check NAs: sel_nas = is.na(osm_traffic$assumed_volume) osm_no_traffic = osm_traffic[sel_nas, c(\"highway\")] table(osm_no_traffic$highway) # Active travel infrastructure has no road traffic #>  #>   corridor   cycleway    footway       path pedestrian      steps  #>          3         17         33          1          6         10  table(osm_traffic$assumed_volume, useNA = \"always\") #>  #>  500 1000 3000 5000 6000 <NA>  #>   13   12   12    4   12   70"},{"path":"https://nptscot.github.io/osmactive/reference/et_active.html","id":null,"dir":"Reference","previous_headings":"","what":"This function returns OSM keys that are relevant for active travel — et_active","title":"This function returns OSM keys that are relevant for active travel — et_active","text":"function returns OSM keys relevant active travel","code":""},{"path":"https://nptscot.github.io/osmactive/reference/et_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function returns OSM keys that are relevant for active travel — et_active","text":"","code":"et_active()"},{"path":"https://nptscot.github.io/osmactive/reference/get_bus_routes.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get multilinestrings representing bus routes — get_bus_routes","title":"Function to get multilinestrings representing bus routes — get_bus_routes","text":"implements query","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_bus_routes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get multilinestrings representing bus routes — get_bus_routes","text":"","code":"get_bus_routes(   place,   query = \"SELECT * FROM multilinestrings WHERE route == 'bus'\",   extra_tags = \"route\",   ... )"},{"path":"https://nptscot.github.io/osmactive/reference/get_bus_routes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get multilinestrings representing bus routes — get_bus_routes","text":"place place name bounding box passed osmextract::oe_get() query query passed osmextract::oe_get() extra_tags vector extra tags included OSM extract ... Additional arguments passed osmextract::oe_get()","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_bus_routes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to get multilinestrings representing bus routes — get_bus_routes","text":"sf object bus routes","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_bus_routes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to get multilinestrings representing bus routes — get_bus_routes","text":"See overpass-turbo.eu example query action.","code":"[out:json][timeout:25]; relation[\"route\"=\"bus\"]({{bbox}}); out geom;"},{"path":"https://nptscot.github.io/osmactive/reference/get_bus_routes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to get multilinestrings representing bus routes — get_bus_routes","text":"","code":"# r = get_bus_routes(\"Edinburgh\") r = get_bus_routes(\"Isle of Wight\") #> The input place was matched with: Isle of Wight #> Downloading the OSM extract: #>    |                                                                               |                                                                      |   0%   |                                                                               |                                                                      |   1%   |                                                                               |=                                                                     |   1%   |                                                                               |=                                                                     |   2%   |                                                                               |==                                                                    |   2%   |                                                                               |==                                                                    |   3%   |                                                                               |==                                                                    |   4%   |                                                                               |===                                                                   |   4%   |                                                                               |===                                                                   |   5%   |                                                                               |====                                                                  |   5%   |                                                                               |====                                                                  |   6%   |                                                                               |=====                                                                 |   6%   |                                                                               |=====                                                                 |   7%   |                                                                               |=====                                                                 |   8%   |                                                                               |======                                                                |   8%   |                                                                               |======                                                                |   9%   |                                                                               |=======                                                               |   9%   |                                                                               |=======                                                               |  10%   |                                                                               |=======                                                               |  11%   |                                                                               |========                                                              |  11%   |                                                                               |========                                                              |  12%   |                                                                               |=========                                                             |  12%   |                                                                               |=========                                                             |  13%   |                                                                               |=========                                                             |  14%   |                                                                               |==========                                                            |  14%   |                                                                               |==========                                                            |  15%   |                                                                               |===========                                                           |  15%   |                                                                               |===========                                                           |  16%   |                                                                               |============                                                          |  17%   |                                                                               |============                                                          |  18%   |                                                                               |=============                                                         |  18%   |                                                                               |=============                                                         |  19%   |                                                                               |==============                                                        |  19%   |                                                                               |==============                                                        |  20%   |                                                                               |==============                                                        |  21%   |                                                                               |===============                                                       |  21%   |                                                                               |===============                                                       |  22%   |                                                                               |================                                                      |  22%   |                                                                               |================                                                      |  23%   |                                                                               |=================                                                     |  24%   |                                                                               |=================                                                     |  25%   |                                                                               |==================                                                    |  25%   |                                                                               |==================                                                    |  26%   |                                                                               |===================                                                   |  27%   |                                                                               |===================                                                   |  28%   |                                                                               |====================                                                  |  28%   |                                                                               |====================                                                  |  29%   |                                                                               |=====================                                                 |  29%   |                                                                               |=====================                                                 |  30%   |                                                                               |=====================                                                 |  31%   |                                                                               |======================                                                |  31%   |                                                                               |======================                                                |  32%   |                                                                               |=======================                                               |  32%   |                                                                               |=======================                                               |  33%   |                                                                               |=======================                                               |  34%   |                                                                               |========================                                              |  34%   |                                                                               |========================                                              |  35%   |                                                                               |=========================                                             |  35%   |                                                                               |=========================                                             |  36%   |                                                                               |==========================                                            |  37%   |                                                                               |==========================                                            |  38%   |                                                                               |===========================                                           |  38%   |                                                                               |===========================                                           |  39%   |                                                                               |============================                                          |  39%   |                                                                               |============================                                          |  40%   |                                                                               |============================                                          |  41%   |                                                                               |=============================                                         |  41%   |                                                                               |=============================                                         |  42%   |                                                                               |==============================                                        |  42%   |                                                                               |==============================                                        |  43%   |                                                                               |===============================                                       |  44%   |                                                                               |===============================                                       |  45%   |                                                                               |================================                                      |  45%   |                                                                               |================================                                      |  46%   |                                                                               |=================================                                     |  47%   |                                                                               |=================================                                     |  48%   |                                                                               |==================================                                    |  48%   |                                                                               |==================================                                    |  49%   |                                                                               |===================================                                   |  49%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================                                  |  51%   |                                                                               |====================================                                  |  52%   |                                                                               |=====================================                                 |  52%   |                                                                               |=====================================                                 |  53%   |                                                                               |======================================                                |  54%   |                                                                               |======================================                                |  55%   |                                                                               |=======================================                               |  55%   |                                                                               |=======================================                               |  56%   |                                                                               |========================================                              |  57%   |                                                                               |========================================                              |  58%   |                                                                               |=========================================                             |  58%   |                                                                               |=========================================                             |  59%   |                                                                               |==========================================                            |  59%   |                                                                               |==========================================                            |  60%   |                                                                               |===========================================                           |  61%   |                                                                               |===========================================                           |  62%   |                                                                               |============================================                          |  62%   |                                                                               |============================================                          |  63%   |                                                                               |============================================                          |  64%   |                                                                               |=============================================                         |  64%   |                                                                               |=============================================                         |  65%   |                                                                               |==============================================                        |  65%   |                                                                               |==============================================                        |  66%   |                                                                               |===============================================                       |  67%   |                                                                               |===============================================                       |  68%   |                                                                               |================================================                      |  68%   |                                                                               |================================================                      |  69%   |                                                                               |=================================================                     |  69%   |                                                                               |=================================================                     |  70%   |                                                                               |=================================================                     |  71%   |                                                                               |==================================================                    |  71%   |                                                                               |==================================================                    |  72%   |                                                                               |===================================================                   |  72%   |                                                                               |===================================================                   |  73%   |                                                                               |====================================================                  |  74%   |                                                                               |====================================================                  |  75%   |                                                                               |=====================================================                 |  75%   |                                                                               |=====================================================                 |  76%   |                                                                               |======================================================                |  76%   |                                                                               |======================================================                |  77%   |                                                                               |======================================================                |  78%   |                                                                               |=======================================================               |  78%   |                                                                               |=======================================================               |  79%   |                                                                               |========================================================              |  79%   |                                                                               |========================================================              |  80%   |                                                                               |========================================================              |  81%   |                                                                               |=========================================================             |  81%   |                                                                               |=========================================================             |  82%   |                                                                               |==========================================================            |  82%   |                                                                               |==========================================================            |  83%   |                                                                               |==========================================================            |  84%   |                                                                               |===========================================================           |  84%   |                                                                               |===========================================================           |  85%   |                                                                               |============================================================          |  85%   |                                                                               |============================================================          |  86%   |                                                                               |=============================================================         |  87%   |                                                                               |=============================================================         |  88%   |                                                                               |==============================================================        |  88%   |                                                                               |==============================================================        |  89%   |                                                                               |===============================================================       |  89%   |                                                                               |===============================================================       |  90%   |                                                                               |===============================================================       |  91%   |                                                                               |================================================================      |  91%   |                                                                               |================================================================      |  92%   |                                                                               |=================================================================     |  92%   |                                                                               |=================================================================     |  93%   |                                                                               |=================================================================     |  94%   |                                                                               |==================================================================    |  94%   |                                                                               |==================================================================    |  95%   |                                                                               |===================================================================   |  95%   |                                                                               |===================================================================   |  96%   |                                                                               |====================================================================  |  97%   |                                                                               |====================================================================  |  98%   |                                                                               |===================================================================== |  98%   |                                                                               |===================================================================== |  99%   |                                                                               |======================================================================|  99%   |                                                                               |======================================================================| 100% #> File downloaded! #> Starting with the vectortranslate operations on the input file! #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Finished the vectortranslate operations on the input file! #> Reading query `SELECT * FROM multilinestrings WHERE route == 'bus'' #> from data source `/tmp/Rtmp7KYxQS/geofabrik_isle-of-wight-latest.gpkg' using driver `GPKG' #> Simple feature collection with 46 features and 5 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.580235 ymin: 50.58314 xmax: -1.078171 ymax: 50.76727 #> Geodetic CRS:  WGS 84 plot(r[\"osm_id\"])"},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OSM cycling network — get_cycling_network","title":"Get the OSM cycling network — get_cycling_network","text":"Get OSM cycling network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OSM cycling network — get_cycling_network","text":"","code":"get_cycling_network(   osm,   ex_c = exclude_highway_cycling(),   ex_b = exclude_bicycle_cycling() )"},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OSM cycling network — get_cycling_network","text":"osm OSM network object ex_c vector highway values exclude ex_b vector bicycle values exclude","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OSM cycling network — get_cycling_network","text":"sf object OSM cycling network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OSM driving network — get_driving_network","title":"Get the OSM driving network — get_driving_network","text":"function returns OSM driving network excluding certain highway values.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OSM driving network — get_driving_network","text":"","code":"get_driving_network(osm, ex_d = exclude_highway_driving())  get_driving_network_major(   osm,   ex_d = exclude_highway_driving(),   pattern = \"motorway|trunk|primary|secondary|tertiary\" )"},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OSM driving network — get_driving_network","text":"osm OSM network object ex_d character string highway values exclude form value1|value2 etc pattern character string highway values define major roads form motorway|trunk|primary|secondary|tertiary","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OSM driving network — get_driving_network","text":"sf object OSM driving network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the OSM driving network — get_driving_network","text":"get_driving_network_major returns major roads.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the palette for the NPT cycle segregation levels — get_palette_npt","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"Get palette NPT cycle segregation levels","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"","code":"get_palette_npt()"},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"palette NPT cycle segregation levels","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"","code":"cols = get_palette_npt() jsonlite::toJSON(as.list(cols), pretty = TRUE) #> { #>   \"Segregated Track (wide)\": [\"#054d05\"], #>   \"Off Road Cycleway\": [\"#3a9120\"], #>   \"Segregated Track (narrow)\": [\"#87d668\"], #>   \"Shared Footway\": [\"#ffbf00\"], #>   \"Painted Cycle Lane\": [\"#FF0000\"] #> }  col_labs = c(\"OffRd\", \"SegW\", \"SegN\", \"Share\", \"Paint\") barplot(seq_along(cols), col = cols, names.arg = col_labs)"},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OSM network functions — get_travel_network","title":"Get the OSM network functions — get_travel_network","text":"Get OSM network functions","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OSM network functions — get_travel_network","text":"","code":"get_travel_network(   place,   extra_tags = et_active(),   columns_to_remove = c(\"waterway\", \"aerialway\", \"barrier\", \"manmade\"),   ... )"},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OSM network functions — get_travel_network","text":"place place name bounding box passed osmextract::oe_get() extra_tags vector extra tags included OSM extract columns_to_remove vector columns removed OSM network ... Additional arguments passed osmextract::oe_get()","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OSM network functions — get_travel_network","text":"sf object OSM network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Separated cycle track by width — is_wide","title":"Classify Separated cycle track by width — is_wide","text":"function classifies cycleways wide width greater equal min_width. NA values replaced 0, meaning ways measurement considered narrow.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Separated cycle track by width — is_wide","text":"","code":"is_wide(x, min_width = 2)"},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Separated cycle track by width — is_wide","text":"x numeric vector width cycleway (m) min_width minimum width cycleway considered wide (m)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Separated cycle track by width — is_wide","text":"logical vector indicating whether cycleway wide","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify Separated cycle track by width — is_wide","text":"","code":"x = osm_edinburgh$width xis_wide(x},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cycle by Design Level of Service — level_of_service","title":"Generate Cycle by Design Level of Service — level_of_service","text":"Generate Cycle Design Level Service","code":""},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cycle by Design Level of Service — level_of_service","text":"","code":"level_of_service(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cycle by Design Level of Service — level_of_service","text":"osm sf object road network including speed limits traffic volumes","code":""},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cycle by Design Level of Service — level_of_service","text":"sf object Cycle Design Level Service column Level Service","code":""},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Cycle by Design Level of Service — level_of_service","text":"","code":"osm = osm_edinburgh osm_los = level_of_service(osm) #> Joining with `by = join_by(`Speed Limit (mph)`, AADT)`"},{"path":"https://nptscot.github.io/osmactive/reference/los_table_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Level of Service (LOS) table — los_table_complete","title":"Complete Level of Service (LOS) table — los_table_complete","text":"dataset contains complete level service information, including missing categories, long format.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/los_table_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete Level of Service (LOS) table — los_table_complete","text":"","code":"data(los_table_complete)"},{"path":"https://nptscot.github.io/osmactive/reference/los_table_complete.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete Level of Service (LOS) table — los_table_complete","text":"data frame columns including speed limit, AADT, cycle_segregation level_of_service","code":""},{"path":"https://nptscot.github.io/osmactive/reference/los_table_complete.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Complete Level of Service (LOS) table — los_table_complete","text":"Generated los_table_long los_table_long_missing datasets","code":""},{"path":"https://nptscot.github.io/osmactive/reference/los_table_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete Level of Service (LOS) table — los_table_complete","text":"","code":"data(los_table_complete) head(los_table_complete) #> # A tibble: 6 × 4 #> # Groups:   Speed Limit (mph), AADT [2] #>   `Speed Limit (mph)` AADT         cycle_segregation         level_of_service #>   <chr>               <chr>        <chr>                                <dbl> #> 1 20 mph              0 to 1999    Mixed Traffic Street                     3 #> 2 20 mph              0 to 1999    Off road cycleway                        3 #> 3 20 mph              0 to 1999    Painted Cycle Lane                       3 #> 4 20 mph              0 to 1999    Segregated Track (narrow)                3 #> 5 20 mph              0 to 1999    Segregated Track (wide)                  3 #> 6 20 mph              2000 to 3999 Mixed Traffic Street                     2"},{"path":"https://nptscot.github.io/osmactive/reference/los_table_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Long format Level of Service (LOS) table — los_table_long","title":"Long format Level of Service (LOS) table — los_table_long","text":"dataset contains level service information long format, columns speed limit, AADT, infrastructure type, level service.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/los_table_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Long format Level of Service (LOS) table — los_table_long","text":"","code":"data(los_table_long)"},{"path":"https://nptscot.github.io/osmactive/reference/los_table_long.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Long format Level of Service (LOS) table — los_table_long","text":"data frame columns including speed limit, AADT, cycle_segregation level_of_service","code":""},{"path":"https://nptscot.github.io/osmactive/reference/los_table_long.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Long format Level of Service (LOS) table — los_table_long","text":"Generated los_table_npt dataset","code":""},{"path":"https://nptscot.github.io/osmactive/reference/los_table_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Long format Level of Service (LOS) table — los_table_long","text":"","code":"data(los_table_long) head(los_table_long) #> # A tibble: 6 × 5 #>   `Speed (85th kph)` `Speed Limit (mph)` AADT    infrastructure level_of_service #>   <chr>              <chr>               <chr>   <chr>                     <dbl> #> 1 30 kph to 50 kph   20 mph              0 to 1… Mixed Traffic…                3 #> 2 30 kph to 50 kph   20 mph              0 to 1… Off road cycl…                3 #> 3 30 kph to 50 kph   20 mph              0 to 1… Painted Cycle…                3 #> 4 30 kph to 50 kph   20 mph              0 to 1… Segregated Tr…                3 #> 5 30 kph to 50 kph   20 mph              0 to 1… Segregated Tr…                3 #> 6 30 kph to 50 kph   20 mph              2000 t… Mixed Traffic…                2"},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert AADT to CBD AADT — npt_to_cbd_aadt","title":"Convert AADT to CBD AADT — npt_to_cbd_aadt","text":"function converts Annual Average Daily Traffic (AADT) Central Business District (CBD) AADT. handles character numeric inputs delegating appropriate helper functions.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert AADT to CBD AADT — npt_to_cbd_aadt","text":"","code":"npt_to_cbd_aadt(AADT)"},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert AADT to CBD AADT — npt_to_cbd_aadt","text":"AADT character numeric value representing Annual Average Daily Traffic.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert AADT to CBD AADT — npt_to_cbd_aadt","text":"converted CBD AADT value.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_character","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_character","text":"function takes AADT (Annual Average Daily Traffic) category converts ranges","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_character","text":"","code":"npt_to_cbd_aadt_character(AADT)"},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_character","text":"AADT character vector representing AADT categories. Valid categories include \"0 1000\", \"0 2000\", \"1000+\", \"\", \"1000 2000\", \"2000 4000\", \"2000+\", \"4000+\".","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_character","text":"character vector converted CBD AADT ranges. Possible return values \"0 1999\", \"2000 3999\", \"4000+\".","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_character","text":"","code":"npt_to_cbd_aadt_character(\"0 to 1000\") # returns \"0 to 1999\" #> [1] \"0 to 1999\" npt_to_cbd_aadt_character(\"2000 to 4000\") # returns \"2000 to 3999\" #> [1] \"2000 to 3999\" npt_to_cbd_aadt_character(\"4000+\") # returns \"4000+\" #> [1] \"4000+\""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_numeric","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_numeric","text":"function takes AADT (Annual Average Daily Traffic) category converts ranges","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_numeric","text":"","code":"npt_to_cbd_aadt_numeric(AADT)"},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_numeric","text":"AADT numeric vector representing AADT","code":""},{"path":"https://nptscot.github.io/osmactive/reference/npt_to_cbd_aadt_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert AADT categories to CBD AADT character ranges — npt_to_cbd_aadt_numeric","text":"character vector converted CBD AADT ranges. Possible return values \"0 1999\", \"2000 3999\", \"4000+\".","code":""},{"path":"https://nptscot.github.io/osmactive/reference/osm_edinburgh.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from edinburgh's OSM network — osm_edinburgh","title":"Data from edinburgh's OSM network — osm_edinburgh","text":"Data edinburgh's OSM network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/osm_edinburgh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from edinburgh's OSM network — osm_edinburgh","text":"sf data frame","code":""},{"path":"https://nptscot.github.io/osmactive/reference/osm_edinburgh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from edinburgh's OSM network — osm_edinburgh","text":"","code":"library(sf) names(osm_edinburgh) #>  [1] \"osm_id\"                    \"name\"                      #>  [3] \"highway\"                   \"cycleway\"                  #>  [5] \"cycleway_left\"             \"cycleway_right\"            #>  [7] \"cycleway_both\"             \"cycleway_left_bicycle\"     #>  [9] \"cycleway_right_bicycle\"    \"cycleway_both_bicycle\"     #> [11] \"cycleway_left_segregated\"  \"cycleway_right_segregated\" #> [13] \"cycleway_both_segregated\"  \"cycleway_surface\"          #> [15] \"cycleway_width\"            \"cycleway_est_width\"        #> [17] \"cycleway_buffered_lane\"    \"bicycle\"                   #> [19] \"lanes\"                     \"foot\"                      #> [21] \"path\"                      \"sidewalk\"                  #> [23] \"segregated\"                \"maxspeed\"                  #> [25] \"width\"                     \"lit\"                       #> [27] \"oneway\"                    \"surface\"                   #> [29] \"smoothness\"                \"other_tags\"                #> [31] \"geometry\"                  head(osm_edinburgh) #> Simple feature collection with 6 features and 30 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -3.194737 ymin: 55.95514 xmax: -3.186586 ymax: 55.95921 #> Geodetic CRS:  WGS 84 #>      osm_id                   name     highway cycleway cycleway_left #> 71  3992791             York Place    tertiary     <NA>      separate #> 185 4049896           Leith Street     primary     <NA>          <NA> #> 197 4071161       Broughton Street   secondary     <NA>          <NA> #> 198 4071162          Dublin Street residential     <NA>          <NA> #> 241 4084027 North St Andrew Street  pedestrian     <NA>          <NA> #> 242 4084028   North St Andrew Lane     service     <NA>          <NA> #>     cycleway_right cycleway_both cycleway_left_bicycle cycleway_right_bicycle #> 71              no          <NA>                  <NA>                   <NA> #> 185           <NA>      separate                  <NA>                   <NA> #> 197           <NA>            no                  <NA>                   <NA> #> 198           <NA>          <NA>                  <NA>                   <NA> #> 241           <NA>          <NA>                  <NA>                   <NA> #> 242           <NA>          <NA>                  <NA>                   <NA> #>     cycleway_both_bicycle cycleway_left_segregated cycleway_right_segregated #> 71                   <NA>                     <NA>                      <NA> #> 185                  <NA>                     <NA>                      <NA> #> 197                  <NA>                     <NA>                      <NA> #> 198                  <NA>                     <NA>                      <NA> #> 241                  <NA>                     <NA>                      <NA> #> 242                  <NA>                     <NA>                      <NA> #>     cycleway_both_segregated cycleway_surface cycleway_width cycleway_est_width #> 71                      <NA>             <NA>           <NA>               <NA> #> 185                     <NA>             <NA>           <NA>               <NA> #> 197                     <NA>             <NA>           <NA>               <NA> #> 198                     <NA>             <NA>           <NA>               <NA> #> 241                     <NA>             <NA>           <NA>               <NA> #> 242                     <NA>             <NA>           <NA>               <NA> #>     cycleway_buffered_lane bicycle lanes foot path sidewalk segregated maxspeed #> 71                    <NA>    <NA>     1 <NA> <NA>     <NA>       <NA>   20 mph #> 185                   <NA>    <NA>     2 <NA> <NA>     <NA>       <NA>   20 mph #> 197                   <NA>    <NA>     2 <NA> <NA>     both       <NA>   20 mph #> 198                   <NA>    <NA>  <NA> <NA> <NA>     both       <NA>   20 mph #> 241                   <NA>    <NA>  <NA>  yes <NA>     <NA>       <NA>     <NA> #> 242                   <NA>    <NA>  <NA> <NA> <NA>     <NA>       <NA>     <NA> #>     width  lit oneway surface smoothness #> 71   <NA> <NA>    yes asphalt       <NA> #> 185  <NA>  yes    yes asphalt       <NA> #> 197  <NA>  yes   <NA> asphalt       good #> 198  <NA>  yes   <NA> asphalt       <NA> #> 241  <NA>  yes   <NA>    sett       <NA> #> 242  <NA> <NA>    yes asphalt       <NA> #>                                                                                               other_tags #> 71  \"embedded_rails\"=>\"tram\",\"sidewalk:left\"=>\"separate\",\"sidewalk:right\"=>\"no\",\"wikidata\"=>\"Q102108491\" #> 185                                                            \"ref\"=>\"A900\",\"sidewalk:both\"=>\"separate\" #> 197                               \"incline\"=>\"up\",\"ref\"=>\"B901\",\"sidewalk:both:surface\"=>\"paving_stones\" #> 198                                                                                      \"incline\"=>\"up\" #> 241                                                                                                 <NA> #> 242                                                                                                 <NA> #>                           geometry #> 71  MULTILINESTRING ((-3.187851... #> 185 MULTILINESTRING ((-3.186586... #> 197 MULTILINESTRING ((-3.190781... #> 198 MULTILINESTRING ((-3.194218... #> 241 MULTILINESTRING ((-3.192841... #> 242 MULTILINESTRING ((-3.194737... plot(osm_edinburgh) #> Warning: plotting the first 9 out of 30 attributes; use max.plot = 30 to plot all"},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"Create tmap object visualizing classified cycle network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"","code":"plot_osm_tmap(   cycle_network_classified,   popup.vars = c(\"name\", \"osm_id\", \"cycle_segregation\", \"distance_to_road\", \"maxspeed\",     \"highway\", \"cycleway\", \"bicycle\", \"lanes\", \"width\", \"surface\", \"other_tags\"),   lwd = 4,   palette = get_palette_npt() )"},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"cycle_network_classified sf object classified cycle network popup.vars vector variables displayed popup lwd line width cycle network palette palette used cycle segregation levels, \"-PuBuGn\" \"npt\" (default)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"tmap object visualizing classified cycle network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/traffic_volumes_edinburgh.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","title":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","text":"Data edinburgh's OSM network traffic volumes","code":""},{"path":"https://nptscot.github.io/osmactive/reference/traffic_volumes_edinburgh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","text":"data frame","code":""},{"path":"https://nptscot.github.io/osmactive/reference/traffic_volumes_edinburgh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","text":"","code":"head(traffic_volumes_edinburgh) #>      osm_id traffic_volume #> 71  3992791           3000 #> 185 4049896           6000 #> 197 4071161           5000 #> 198 4071162           1000 #> 241 4084027           1000 #> 242 4084028           1000 head(traffic_random_edinburgh) #>      osm_id traffic_volume #> 71  3992791           3936 #> 185 4049896           3603 #> 197 4071161           4429 #> 198 4071162            653 #> 241 4084027           2582 #> 242 4084028           1757"}]
