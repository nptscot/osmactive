[{"path":"https://nptscot.github.io/osmactive/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Robin Lovelace Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nptscot.github.io/osmactive/articles/classifying-cycle-infrastructure.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Typologies of cycle infrastructure","text":"Transport networks diverse complex. applies modes transport, especially ‘cycle network’ , uniquely, includes infrastructure motorised non-motorised modes. paper present typology cycle infrastructure classification systems, based review official documents academic literature. find substantial differences way cycle infrastructure classified countries. Countries established pro-cycling policies tend TBC classification systems, countries less established pro-cycling policies tend TBC classification systems. Recent efforts provide international guidance talk classify cycling infrastructure impacts policies: measuring level separation motor traffic, example, enables planners focus infrastructure safe . conclude tentative recommendations classification systems different use cases, reference open source implementations reproducible cycle infrastructure classification. osmactive package accompanies paper, classifies cycle infrastructure based OSM tags represents one implementation. work presented paper experience developing package can provide basis open community-driven classification systems co-evolve changing policy, community data-availability landscapes.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://nptscot.github.io/osmactive/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin Lovelace. Author, maintainer. Joey Talbot. Author.","code":""},{"path":"https://nptscot.github.io/osmactive/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lovelace R, Talbot J (2024). osmactive: Extract Active Travel Infrastructure OpenStreetMap. R package version 0.0.0.9000, https://nptscot.github.io/osmactive/.","code":"@Manual{,   title = {osmactive: Extract Active Travel Infrastructure from OpenStreetMap},   author = {Robin Lovelace and Joey Talbot},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://nptscot.github.io/osmactive/}, }"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"osmactive","dir":"","previous_headings":"","what":"Extract Active Travel Infrastructure from OpenStreetMap","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"goal osmactive provide functions, example datasets documentation extracting active travel infrastructure OpenStreetMap data. Install package : Alternatively, can load package following local development:","code":"remotes::install_github(\"nptscot/osmactive\") library(osmactive) library(tmap) # for mapping library(dplyr) # for data manipulation library(sf) # for spatial data"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"minimal-example","dir":"","previous_headings":"","what":"Minimal example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"package comes example data testing functions. can test functions follows: can also create plots packaged plot_osm_tmap() function:","code":"osm = osm_edinburgh cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) drive_net_major = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) table(cycle_net$detailed_segregation) #>  #>          Level track Mixed Traffic Street    Off Road Cycleway  #>                   13                    1                    4  #>   Painted Cycle Lane  #>                    3 table(cycle_net$cycle_segregation) #>  #>   Segregated Track (wide)         Off Road Cycleway Segregated Track (narrow)  #>                         7                         4                         6  #>            Shared Footway        Painted Cycle Lane  #>                         1                         3 m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"leeds-example","dir":"","previous_headings":"","what":"Leeds example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"osm = get_travel_network(\"Leeds\") #> Reading layer `lines' from data source `/home/robin/data/osm/bbbike_Leeds.gpkg' using driver `GPKG' #> Simple feature collection with 39330 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -1.634843 ymin: 53.74351 xmax: -1.452746 ymax: 53.85133 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m tmap_save(m, \"classify_cycle_infrastructure_leeds.html\") browseURL(\"classify_cycle_infrastructure_leeds.html\")  system(\"gh release upload v0.1 classify_cycle_infrastructure_leeds.html --clobber\")  # Available: # https://github.com/nptscot/osmactive/releases/download/v0.1/classify_cycle_infrastructure_leeds.html"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"edinburgh-example","dir":"","previous_headings":"","what":"Edinburgh example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"osm = get_travel_network(\"Edinburgh\") #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/bbbike_Edinburgh.gpkg' using driver `GPKG' #> Simple feature collection with 223516 features and 45 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -3.579998 ymin: 55.7 xmax: -2.77 ymax: 56.1 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"dublin-example","dir":"","previous_headings":"","what":"Dublin example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"dublin_zones = zonebuilder::zb_zone(\"Dublin\") dublin_6km = dublin_zones |>   filter(circle_id <= 3) |>   sf::st_union() osm = get_travel_network(\"Republic of Ireland\", boundary = dublin_6km, boundary_type = \"clipsrc\") #> 0...10...20...30...40...50...60... #> 70...80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/geofabrik_ireland-and-northern-ireland-latest.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 50319 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -6.350653 ymin: 53.29547 xmax: -6.170875 ymax: 53.40329 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"lisbon-example","dir":"","previous_headings":"","what":"Lisbon example","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"u = \"https://ushift.tecnico.ulisboa.pt/content/data/lisbon_limit.geojson\" f = basename(u) if (!file.exists(f)) download.file(u, f) lisbon = sf::read_sf(f) lisbon = lisbon |>   sf::st_cast(\"POLYGON\") osm = get_travel_network(\"Portugal\", boundary = lisbon, boundary_type = \"clipsrc\", force_vectortranslate = TRUE) #> 0...10...20...30...40...50...60...70... #> 80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/geofabrik_portugal-latest.gpkg' using driver `GPKG' #> Simple feature collection with 47866 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -9.229835 ymin: 38.6914 xmax: -9.087336 ymax: 38.79747 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"london","dir":"","previous_headings":"","what":"London","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"london = zonebuilder::zb_zone(\"Southwark Station\", n_circles = 1) london = sf::st_union(london) |>   sf::st_make_valid() osm = get_travel_network(london, boundary = london, boundary_type = \"clipsrc\") #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/geofabrik_greater-london-latest.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 5856 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -0.1188785 ymin: 51.49424 xmax: -0.09009284 ymax: 51.51222 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/index.html","id":"cambridge","dir":"","previous_headings":"","what":"Cambridge","title":"Extract Active Travel Infrastructure from OpenStreetMap","text":"","code":"cambridge = zonebuilder::zb_zone(\"Cambridge\") cambridge = sf::st_union(cambridge) |>   sf::st_make_valid() osm = get_travel_network(\"Cambridge\", boundary = cambridge, boundary_type = \"clipsrc\") #> 0...10...20...30...40...50...60...70...80...90...100 - done. #> Reading layer `lines' from data source  #>   `/home/robin/data/osm/bbbike_Cambridge.gpkg' using driver `GPKG' #> Simple feature collection with 49665 features and 45 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -0.0399984 ymin: 52.12 xmax: 0.319972 ymax: 52.28 #> Geodetic CRS:  WGS 84 cycle_net = get_cycling_network(osm) drive_net = get_driving_network(osm) cycle_net = distance_to_road(cycle_net, drive_net) cycle_net = classify_cycle_infrastructure(cycle_net) m = plot_osm_tmap(cycle_net) m"},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":null,"dir":"Reference","previous_headings":"","what":"Segregation levels — classify_cycle_infrastructure","title":"Segregation levels — classify_cycle_infrastructure","text":"function classifies OSM ways cycle infrastructure type levels given dataset.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segregation levels — classify_cycle_infrastructure","text":"","code":"classify_cycle_infrastructure(   osm,   min_distance = 20,   classification_type = \"Scotland\",   include_mixed_traffic = FALSE )"},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segregation levels — classify_cycle_infrastructure","text":"osm input dataset segregation levels need calculated. min_distance minimum distance road cycleway considered -road. classification_type classification type used. Currently \"Scotland\" supported. include_mixed_traffic Whether include mixed traffic segments results.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segregation levels — classify_cycle_infrastructure","text":"sf object new column cycle_segregation contains segregation levels.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segregation levels — classify_cycle_infrastructure","text":"See wiki.openstreetmap.org/wiki/Key:cycleway taginfo.openstreetmap.org/keys/cycleway#values information cycleway values used classify cycle infrastructure. Currently, \"Scotland\" classification type supported. See Scottish Government's Cycling Design information.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_cycle_infrastructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segregation levels — classify_cycle_infrastructure","text":"","code":"library(tmap) #>  #> Attaching package: ‘tmap’ #> The following object is masked from ‘package:datasets’: #>  #>     rivers tmap_mode(\"plot\") #> ℹ tmap mode set to \"plot\". osm = osm_edinburgh cycle_network = get_cycling_network(osm) driving_network = get_driving_network(osm) netd = distance_to_road(cycle_network, driving_network) netc = classify_cycle_infrastructure(netd) library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE plot(netc[\"cycle_segregation\"])  plot(netc[\"distance_to_road\"])  plot_osm_tmap(netc)  # Interactive map: # tmap_mode(\"view\") # plot_osm_tmap(netc)"},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"Ways bicycles pedestrians share space classified \"Shared Footway\". According ","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"","code":"classify_shared_use(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"sf object classified cycle network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"tagging includes: highway=path (signposted foot bicycle path, dividing line) foot=designated bicycle=designated segregated=highway=path (Signposted foot bicycle path dividing line.) segregated=yes highway=pedestrian (way intended pedestrians)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/classify_shared_use.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify ways by level of pedestrian/cyclist sharing — classify_shared_use","text":"","code":"osm = osm_edinburgh cycle_network = get_cycling_network(osm) cycle_network_shared = classify_shared_use(cycle_network) table(cycle_network_shared$cycle_pedestrian_separation) #>  #>     Shared Footway (segregated) Shared Footway (not segregated)  #>                               5                               3  #>                         Unknown  #>                              59  plot(cycle_network_shared[\"cycle_pedestrian_separation\"])  # interactive map: # mapview::mapview(cycle_network_shared, zcol = \"cycle_pedestrian_separation\")"},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean speeds — clean_speeds","title":"Clean speeds — clean_speeds","text":"Clean speeds","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean speeds — clean_speeds","text":"","code":"clean_speeds(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean speeds — clean_speeds","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean speeds — clean_speeds","text":"sf object cleaned speed values column maxspeed_clean","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_speeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean speeds — clean_speeds","text":"","code":"osm = osm_edinburgh osm_cleaned = clean_speeds(osm) # check NAs: sel_nas = is.na(osm_cleaned$maxspeed_clean) osm_no_maxspeed = osm_cleaned[sel_nas, c(\"highway\")] table(osm_no_maxspeed$highway) # Active travel infrastructure has no maxspeed #>  #>   corridor   cycleway    footway       path pedestrian      steps  #>          3         17         33          1          6         10  table(osm_cleaned$maxspeed) #>  #> 20 mph  5 mph  #>     42      1  table(osm_cleaned$maxspeed_clean) #>  #>  5 20  #>  1 52  plot(osm_cleaned[c(\"maxspeed\", \"maxspeed_clean\")])"},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"Clean cycleway widths (use est_widths available width otherwise)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"","code":"clean_widths(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"sf object cleaned cycleway widths column width","code":""},{"path":"https://nptscot.github.io/osmactive/reference/clean_widths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean cycleway widths (use est_widths when available and width otherwise) — clean_widths","text":"","code":"osm = osm_edinburgh osm$widthosm$est_width = NA osm$est_width[1:3] = 2 osm_cleaned = clean_widths(osm) osm$widthosm_cleaned$width},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distance from route network segments to roads — distance_to_road","title":"Calculate distance from route network segments to roads — distance_to_road","text":"function approximates distance route network nearest road. first computing sf::st_point_on_surface route network segments calculating distance nearest road using geos::geos_distance function.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distance from route network segments to roads — distance_to_road","text":"","code":"distance_to_road(rnet, roads)"},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distance from route network segments to roads — distance_to_road","text":"rnet route network distance road needs calculated. roads road network distance needs calculated.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distance from route network segments to roads — distance_to_road","text":"sf object new column distance_to_road contains distance road.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/distance_to_road.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distance from route network segments to roads — distance_to_road","text":"","code":"osm = osm_edinburgh cycle_network = get_cycling_network(osm) driving_network = get_driving_network(osm) edinburgh_cycle_with_distance = distance_to_road(cycle_network, driving_network)"},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate traffic — estimate_traffic","title":"Estimate traffic — estimate_traffic","text":"Estimate traffic","code":""},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate traffic — estimate_traffic","text":"","code":"estimate_traffic(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate traffic — estimate_traffic","text":"osm sf object road network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate traffic — estimate_traffic","text":"sf object estimated road traffic volumes column assumed_volume","code":""},{"path":"https://nptscot.github.io/osmactive/reference/estimate_traffic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate traffic — estimate_traffic","text":"","code":"osm = osm_edinburgh osm_traffic = estimate_traffic(osm) # check NAs: sel_nas = is.na(osm_traffic$assumed_volume) osm_no_traffic = osm_traffic[sel_nas, c(\"highway\")] table(osm_no_traffic$highway) # Active travel infrastructure has no road traffic #>  #>   corridor   cycleway    footway       path pedestrian      steps  #>          3         17         33          1          6         10  table(osm_traffic$assumed_volume, useNA = \"always\") #>  #>  500 1000 3000 5000 6000 <NA>  #>   13   12   12    4   12   70"},{"path":"https://nptscot.github.io/osmactive/reference/et_active.html","id":null,"dir":"Reference","previous_headings":"","what":"This function returns OSM keys that are relevant for active travel — et_active","title":"This function returns OSM keys that are relevant for active travel — et_active","text":"function returns OSM keys relevant active travel","code":""},{"path":"https://nptscot.github.io/osmactive/reference/et_active.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function returns OSM keys that are relevant for active travel — et_active","text":"","code":"et_active()"},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OSM cycling network — get_cycling_network","title":"Get the OSM cycling network — get_cycling_network","text":"Get OSM cycling network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OSM cycling network — get_cycling_network","text":"","code":"get_cycling_network(   osm,   ex_c = exclude_highway_cycling(),   ex_b = exclude_bicycle_cycling() )"},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OSM cycling network — get_cycling_network","text":"osm OSM network object ex_c vector highway values exclude ex_b vector bicycle values exclude","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_cycling_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OSM cycling network — get_cycling_network","text":"sf object OSM cycling network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OSM driving network — get_driving_network","title":"Get the OSM driving network — get_driving_network","text":"function returns OSM driving network excluding certain highway values.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OSM driving network — get_driving_network","text":"","code":"get_driving_network(osm, ex_d = exclude_highway_driving())  get_driving_network_major(   osm,   ex_d = exclude_highway_driving(),   pattern = \"motorway|trunk|primary|secondary|tertiary\" )"},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OSM driving network — get_driving_network","text":"osm OSM network object ex_d character string highway values exclude form value1|value2 etc pattern character string highway values define major roads form motorway|trunk|primary|secondary|tertiary","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OSM driving network — get_driving_network","text":"sf object OSM driving network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_driving_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the OSM driving network — get_driving_network","text":"get_driving_network_major returns major roads.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the palette for the NPT cycle segregation levels — get_palette_npt","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"Get palette NPT cycle segregation levels","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"","code":"get_palette_npt()"},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"palette NPT cycle segregation levels","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_palette_npt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the palette for the NPT cycle segregation levels — get_palette_npt","text":"","code":"cols = get_palette_npt() jsonlite::toJSON(as.list(cols), pretty = TRUE) #> { #>   \"Segregated Track (wide)\": [\"#054d05\"], #>   \"Off Road Cycleway\": [\"#3a9120\"], #>   \"Segregated Track (narrow)\": [\"#87d668\"], #>   \"Shared Footway\": [\"#ffbf00\"], #>   \"Painted Cycle Lane\": [\"#FF0000\"] #> }  col_labs = c(\"OffRd\", \"SegW\", \"SegN\", \"Share\", \"Paint\") barplot(seq_along(cols), col = cols, names.arg = col_labs)"},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the OSM network functions — get_travel_network","title":"Get the OSM network functions — get_travel_network","text":"Get OSM network functions","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the OSM network functions — get_travel_network","text":"","code":"get_travel_network(   place,   extra_tags = et_active(),   columns_to_remove = c(\"waterway\", \"aerialway\", \"barrier\", \"manmade\"),   ... )"},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the OSM network functions — get_travel_network","text":"place place name bounding box passed osmextract::oe_get() extra_tags vector extra tags included OSM extract columns_to_remove vector columns removed OSM network ... Additional arguments passed osmextract::oe_get()","code":""},{"path":"https://nptscot.github.io/osmactive/reference/get_travel_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the OSM network functions — get_travel_network","text":"sf object OSM network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Separated cycle track by width — is_wide","title":"Classify Separated cycle track by width — is_wide","text":"function classifies cycleways wide width greater equal min_width. NA values replaced 0, meaning ways measurement considered narrow.","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Separated cycle track by width — is_wide","text":"","code":"is_wide(x, min_width = 2)"},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify Separated cycle track by width — is_wide","text":"x numeric vector width cycleway (m) min_width minimum width cycleway considered wide (m)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify Separated cycle track by width — is_wide","text":"logical vector indicating whether cycleway wide","code":""},{"path":"https://nptscot.github.io/osmactive/reference/is_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify Separated cycle track by width — is_wide","text":"","code":"x = osm_edinburgh$width xis_wide(x},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Cycle by Design Level of Service — level_of_service","title":"Generate Cycle by Design Level of Service — level_of_service","text":"Generate Cycle Design Level Service","code":""},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Cycle by Design Level of Service — level_of_service","text":"","code":"level_of_service(osm)"},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Cycle by Design Level of Service — level_of_service","text":"osm sf object road network including speed limits traffic volumes","code":""},{"path":"https://nptscot.github.io/osmactive/reference/level_of_service.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Cycle by Design Level of Service — level_of_service","text":"sf object Cycle Design Level Service column Level Service","code":""},{"path":"https://nptscot.github.io/osmactive/reference/osm_edinburgh.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from edinburgh's OSM network — osm_edinburgh","title":"Data from edinburgh's OSM network — osm_edinburgh","text":"Data edinburgh's OSM network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/osm_edinburgh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from edinburgh's OSM network — osm_edinburgh","text":"sf data frame","code":""},{"path":"https://nptscot.github.io/osmactive/reference/osm_edinburgh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from edinburgh's OSM network — osm_edinburgh","text":"","code":"library(sf) names(osm_edinburgh) #>  [1] \"osm_id\"                    \"name\"                      #>  [3] \"highway\"                   \"cycleway\"                  #>  [5] \"cycleway_left\"             \"cycleway_right\"            #>  [7] \"cycleway_both\"             \"cycleway_left_bicycle\"     #>  [9] \"cycleway_right_bicycle\"    \"cycleway_both_bicycle\"     #> [11] \"cycleway_left_segregated\"  \"cycleway_right_segregated\" #> [13] \"cycleway_both_segregated\"  \"cycleway_surface\"          #> [15] \"cycleway_width\"            \"cycleway_est_width\"        #> [17] \"cycleway_buffered_lane\"    \"bicycle\"                   #> [19] \"lanes\"                     \"foot\"                      #> [21] \"path\"                      \"sidewalk\"                  #> [23] \"segregated\"                \"maxspeed\"                  #> [25] \"width\"                     \"lit\"                       #> [27] \"oneway\"                    \"surface\"                   #> [29] \"smoothness\"                \"other_tags\"                #> [31] \"geometry\"                  head(osm_edinburgh) #> Simple feature collection with 6 features and 30 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -3.194737 ymin: 55.95514 xmax: -3.186586 ymax: 55.95921 #> Geodetic CRS:  WGS 84 #>      osm_id                   name     highway cycleway cycleway_left #> 71  3992791             York Place    tertiary     <NA>      separate #> 185 4049896           Leith Street     primary     <NA>          <NA> #> 197 4071161       Broughton Street   secondary     <NA>          <NA> #> 198 4071162          Dublin Street residential     <NA>          <NA> #> 241 4084027 North St Andrew Street  pedestrian     <NA>          <NA> #> 242 4084028   North St Andrew Lane     service     <NA>          <NA> #>     cycleway_right cycleway_both cycleway_left_bicycle cycleway_right_bicycle #> 71              no          <NA>                  <NA>                   <NA> #> 185           <NA>      separate                  <NA>                   <NA> #> 197           <NA>            no                  <NA>                   <NA> #> 198           <NA>          <NA>                  <NA>                   <NA> #> 241           <NA>          <NA>                  <NA>                   <NA> #> 242           <NA>          <NA>                  <NA>                   <NA> #>     cycleway_both_bicycle cycleway_left_segregated cycleway_right_segregated #> 71                   <NA>                     <NA>                      <NA> #> 185                  <NA>                     <NA>                      <NA> #> 197                  <NA>                     <NA>                      <NA> #> 198                  <NA>                     <NA>                      <NA> #> 241                  <NA>                     <NA>                      <NA> #> 242                  <NA>                     <NA>                      <NA> #>     cycleway_both_segregated cycleway_surface cycleway_width cycleway_est_width #> 71                      <NA>             <NA>           <NA>               <NA> #> 185                     <NA>             <NA>           <NA>               <NA> #> 197                     <NA>             <NA>           <NA>               <NA> #> 198                     <NA>             <NA>           <NA>               <NA> #> 241                     <NA>             <NA>           <NA>               <NA> #> 242                     <NA>             <NA>           <NA>               <NA> #>     cycleway_buffered_lane bicycle lanes foot path sidewalk segregated maxspeed #> 71                    <NA>    <NA>     1 <NA> <NA>     <NA>       <NA>   20 mph #> 185                   <NA>    <NA>     2 <NA> <NA>     <NA>       <NA>   20 mph #> 197                   <NA>    <NA>     2 <NA> <NA>     both       <NA>   20 mph #> 198                   <NA>    <NA>  <NA> <NA> <NA>     both       <NA>   20 mph #> 241                   <NA>    <NA>  <NA>  yes <NA>     <NA>       <NA>     <NA> #> 242                   <NA>    <NA>  <NA> <NA> <NA>     <NA>       <NA>     <NA> #>     width  lit oneway surface smoothness #> 71   <NA> <NA>    yes asphalt       <NA> #> 185  <NA>  yes    yes asphalt       <NA> #> 197  <NA>  yes   <NA> asphalt       good #> 198  <NA>  yes   <NA> asphalt       <NA> #> 241  <NA>  yes   <NA>    sett       <NA> #> 242  <NA> <NA>    yes asphalt       <NA> #>                                                                                               other_tags #> 71  \"embedded_rails\"=>\"tram\",\"sidewalk:left\"=>\"separate\",\"sidewalk:right\"=>\"no\",\"wikidata\"=>\"Q102108491\" #> 185                                                            \"ref\"=>\"A900\",\"sidewalk:both\"=>\"separate\" #> 197                               \"incline\"=>\"up\",\"ref\"=>\"B901\",\"sidewalk:both:surface\"=>\"paving_stones\" #> 198                                                                                      \"incline\"=>\"up\" #> 241                                                                                                 <NA> #> 242                                                                                                 <NA> #>                           geometry #> 71  MULTILINESTRING ((-3.187851... #> 185 MULTILINESTRING ((-3.186586... #> 197 MULTILINESTRING ((-3.190781... #> 198 MULTILINESTRING ((-3.194218... #> 241 MULTILINESTRING ((-3.192841... #> 242 MULTILINESTRING ((-3.194737... plot(osm_edinburgh) #> Warning: plotting the first 9 out of 30 attributes; use max.plot = 30 to plot all"},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"Create tmap object visualizing classified cycle network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"","code":"plot_osm_tmap(   cycle_network_classified,   popup.vars = c(\"name\", \"osm_id\", \"cycle_segregation\", \"distance_to_road\", \"maxspeed\",     \"highway\", \"cycleway\", \"bicycle\", \"lanes\", \"width\", \"surface\", \"other_tags\"),   lwd = 4,   palette = get_palette_npt() )"},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"cycle_network_classified sf object classified cycle network popup.vars vector variables displayed popup lwd line width cycle network palette palette used cycle segregation levels, \"-PuBuGn\" \"npt\" (default)","code":""},{"path":"https://nptscot.github.io/osmactive/reference/plot_osm_tmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tmap object for visualizing the classified cycle network — plot_osm_tmap","text":"tmap object visualizing classified cycle network","code":""},{"path":"https://nptscot.github.io/osmactive/reference/traffic_volumes_edinburgh.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","title":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","text":"Data edinburgh's OSM network traffic volumes","code":""},{"path":"https://nptscot.github.io/osmactive/reference/traffic_volumes_edinburgh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","text":"data frame","code":""},{"path":"https://nptscot.github.io/osmactive/reference/traffic_volumes_edinburgh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from edinburgh's OSM network with traffic volumes — traffic_volumes_edinburgh","text":"","code":"head(traffic_volumes_edinburgh) #>      osm_id traffic_volume #> 71  3992791           3000 #> 185 4049896           6000 #> 197 4071161           5000 #> 198 4071162           1000 #> 241 4084027           1000 #> 242 4084028           1000 head(traffic_random_edinburgh) #>      osm_id traffic_volume #> 71  3992791           3936 #> 185 4049896           3603 #> 197 4071161           4429 #> 198 4071162            653 #> 241 4084027           2582 #> 242 4084028           1757"}]
